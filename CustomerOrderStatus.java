/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fos;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HPvictus2022
 */
public class CustomerOrderStatus extends javax.swing.JFrame {

    /**
     * Creates new form orderstatus
     */
    public CustomerOrderStatus() {
        
    }
    
    private String uID;
    
    public CustomerOrderStatus(String uID)
    {
        this.uID = uID;
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        Order orderInstance = new Order();
        orderInstance.setuID(uID);
        List<Order> statusData = orderInstance.ReadOrder();
        String[] columnNames = {"Order ID", "Date", "Total", "User ID", "Service Type", "Item Name", "Order Status",
                "Vendor ID", "Delivery Status", "Item ID", "Runner ID"};
        Object[][] statusArray = new Object[statusData.size()][];
        for (int i = 0; i < statusData.size(); i++) {
            Order status = statusData.get(i);
            statusArray[i] = new Object[]{
                    status.getOrderId(),
                    status.getOrderTime(),
                    status.getItemPrice(),
                    status.getuID(),
                    status.getServiceType(),
                    status.getItemName(),
                    status.getOrderStatus(),
                    status.getVendorID(),
                    status.getDeliveryS(),
                    status.getItemID(),
                    status.getRunnerID()
            };
        }
        Ht = new DefaultTableModel(statusArray, columnNames);
        statusTable.setModel(Ht);
    }
    
    private DefaultTableModel Ht;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTable = new javax.swing.JTable();
        cancelOrder = new javax.swing.JButton();
        received = new javax.swing.JButton();
        reorder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
    );
    statusTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
        public void mouseDragged(java.awt.event.MouseEvent evt) {
            statusTableMouseDragged(evt);
        }
    });
    statusTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            statusTableMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            statusTableMouseEntered(evt);
        }
    });
    statusTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
        public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            statusTableCaretPositionChanged(evt);
        }
        public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            statusTableInputMethodTextChanged(evt);
        }
    });
    statusTable.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            statusTableKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            statusTableKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            statusTableKeyTyped(evt);
        }
    });
    jScrollPane1.setViewportView(statusTable);

    cancelOrder.setText("Cancel Order");
    cancelOrder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelOrderActionPerformed(evt);
        }
    });

    received.setText("Order Received");
    received.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            receivedActionPerformed(evt);
        }
    });

    reorder.setText("Reorder");
    reorder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            reorderActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(reorder)
                    .addGap(75, 75, 75)
                    .addComponent(received)
                    .addGap(58, 58, 58)
                    .addComponent(cancelOrder)
                    .addGap(128, 128, 128)
                    .addComponent(jButton1)
                    .addGap(137, 137, 137))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(cancelOrder)
                .addComponent(received)
                .addComponent(reorder))
            .addGap(16, 16, 16))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CustomerHome s=new CustomerHome(uID);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    //back up for removing the pending item
    /*order cancel=new order();
        if(cancel.cancelOrder(Ht,statusTable))
        {
            cancel.updateFile("C:\\Users\\victu\\ordering.txt");
        } */
    private void cancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderActionPerformed
        int Row = statusTable.getSelectedRow();
        if(Row!=-1){
        {}String orID = statusTable.getValueAt(Row, 0).toString();
        String date = statusTable.getValueAt(Row, 1).toString();
        Object value = statusTable.getValueAt(Row, 2);
        double prices = Double.parseDouble(value.toString());
        String serviceT = statusTable.getValueAt(Row, 4).toString();
        String itemN = statusTable.getValueAt(Row, 5).toString();
        String vendorID = statusTable.getValueAt(Row, 7).toString();
        String itemID = statusTable.getValueAt(Row, 9).toString();
        String runnerID = statusTable.getValueAt(Row, 10).toString();
        String orderStatus = statusTable.getValueAt(Row, 6).toString();
        if(serviceT.equals("Delivery")){}else{}
        
        Order completed = new Order();
        int orderID=Integer.parseInt(orID);
        completed.setOrderId(orderID);
        completed.setSelectedRow(Row);
        completed.setuID(uID);
        completed.setItemID(itemID);
        completed.setItemName(itemN);
        completed.setoID(orID);
        completed.setOrderTime(date);
        completed.setItemPrice(prices);
        completed.setServiceType(serviceT);
        completed.setOrderStatus(orderStatus);
        completed.setVendorID(vendorID);
        completed.setRunnerID(runnerID);
        completed.setDeliveryFees(0);
        
    if (completed.receivedOrder("declined")||completed.receivedOrder("pending")) {
        Ht.removeRow(Row);
        JOptionPane.showMessageDialog(null,
                "Order updated successfully", "Order Status", JOptionPane.INFORMATION_MESSAGE);
        completed.updateHistory();
    }}else{
            JOptionPane.showMessageDialog(null,
                    "Please select an item to remove.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cancelOrderActionPerformed

    private void receivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedActionPerformed
        int Row = statusTable.getSelectedRow();
        if(Row!=-1){
        {}String orID = statusTable.getValueAt(Row, 0).toString();
        String date = statusTable.getValueAt(Row, 1).toString();
        Object value = statusTable.getValueAt(Row, 2);
        double prices = Double.parseDouble(value.toString());
        String serviceT = statusTable.getValueAt(Row, 4).toString();
        String itemN = statusTable.getValueAt(Row, 5).toString();
        String vendorID = statusTable.getValueAt(Row, 7).toString();
        String itemID = statusTable.getValueAt(Row, 9).toString();
        String runnerID = statusTable.getValueAt(Row, 10).toString();
        String orderStatus = statusTable.getValueAt(Row, 6).toString();
        double deliveryFees;
        if(serviceT.equals("Delivery")){deliveryFees=5;}else{deliveryFees=0.00;}
        
        Order completed = new Order();
        int orderID=Integer.parseInt(orID);
        completed.setOrderId(orderID);
        completed.setSelectedRow(Row);
        completed.setuID(uID);
        completed.setItemID(itemID);
        completed.setItemName(itemN);
        completed.setoID(orID);
        completed.setOrderTime(date);
        completed.setItemPrice(prices);
        completed.setServiceType(serviceT);
        completed.setOrderStatus(orderStatus);
        completed.setVendorID(vendorID);
        completed.setRunnerID(runnerID);
        completed.setDeliveryFees(deliveryFees);
        
    if (completed.receivedOrder("completed")) {
        Ht.removeRow(Row);
        JOptionPane.showMessageDialog(null,
                "Order received successfully", "Order Status", JOptionPane.INFORMATION_MESSAGE);
        completed.updateHistory();
        if(serviceT.equals("Delivery"))
        {
            String foodR = JOptionPane.showInputDialog(null, "Please write a review for the item:");
            String deliveryR = JOptionPane.showInputDialog(null, "Please write a review for the delivery:");
            completed.setDeliveryR(deliveryR);
            completed.setFoodR(foodR);
            completed.review();
        }
        else
        {
            String food = JOptionPane.showInputDialog(null, "Please write a review for the item:");
            String delivery="-";
            completed.setFoodR(food);
            completed.setDeliveryR(delivery);
            completed.review();
        }
    }}else{
            JOptionPane.showMessageDialog(null,
                    "Please select an item to collect.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_receivedActionPerformed

    private void statusTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusTableMouseClicked
        boolean a=statusTable.isEditing();
        if(a==false)
        {
            JOptionPane.showMessageDialog(null,"You cannot edit the content");
        }
    }//GEN-LAST:event_statusTableMouseClicked

    private void statusTableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusTableMouseDragged
        boolean a=statusTable.isEditing();
        if(a==false)
        {
            JOptionPane.showMessageDialog(null,"Cannot select multiple items");
        }
    }//GEN-LAST:event_statusTableMouseDragged

    private void statusTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusTableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTableKeyReleased

    private void statusTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusTableKeyPressed
        boolean a=statusTable.isEditing();
        if(a==false)
        {
            JOptionPane.showMessageDialog(null,"You cannot edit the content");
        }
    }//GEN-LAST:event_statusTableKeyPressed

    private void statusTableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_statusTableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTableCaretPositionChanged

    private void statusTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_statusTableInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTableInputMethodTextChanged

    private void statusTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusTableKeyTyped
        boolean a=statusTable.isEditing();
        if(a==false)
        {
            JOptionPane.showMessageDialog(null,"You cannot edit the content");
        }
    }//GEN-LAST:event_statusTableKeyTyped

    private void statusTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTableMouseEntered

    public int deliveryStatus() throws FileNotFoundException, IOException
    {
        int Count = 0;
        File orderFile=new File("User.txt");
             try (FileReader input = new FileReader(orderFile)) 
             {
                 BufferedReader CustomerCount=new BufferedReader(input);
                 String line; 
                 String Role;
                 while ((line = CustomerCount.readLine()) != null)
                 {
                     String[] parts = line.split(",");
                     if(parts.length>=3){
                     Role=(parts[2]);
                     if (Role.equals("runner"))  
                     {
                         Count ++;
                     }}}}
        return Count;
    }
    
    private void reorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reorderActionPerformed
        int Row = statusTable.getSelectedRow();
        if(Row!=-1){
        Order Order=new Order();
        Payment balance=new Payment();
        balance.setuID(uID);
        double balances=balance.calBalance();
        int orderId=Order.generateID();
        balance.setBalance(balances);
        
        String orderTime = Order.generateTime();
        
        String oId= statusTable.getValueAt(Row, 0).toString();
        Object value = statusTable.getValueAt(Row, 2);
        double prices = Double.parseDouble(value.toString());
        String itemID = statusTable.getValueAt(Row, 9).toString();
        String vendorID= statusTable.getValueAt(Row, 7).toString();
        String itemName = statusTable.getValueAt(Row, 5).toString();
        double itemPrice = Double.parseDouble(statusTable.getValueAt(Row, 2).toString());
        int deliveryStatus = (Integer) statusTable.getValueAt(Row, 8);
        int[] selectedRows = statusTable.getSelectedRows();
        balance.setTotal(prices);
        int count = 0;
            try {
                count = deliveryStatus();
            } catch (IOException ex) {
                Logger.getLogger(CustomerOrderStatus.class.getName()).log(Level.SEVERE, null, ex);
            }
        if(deliveryStatus==count){
        String[] options = {"Dine In", "Take Away"};
        int choice = JOptionPane.showOptionDialog(
                null,
                "Select Service Type",
                "Service Type",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]
        );
        String service="Dine In";
        switch (choice) {
            case 0 -> service="Dine In";
            case 1 -> service="Take Away";
            default -> {
            }
        }
        Order.setItemID(itemID);
        Order.setOrderId(orderId);
        Order.setOrderTime(orderTime);
        Order.setServiceType(service);
        Order.setuID(uID);
        Order.setVendorID(vendorID);
        Order.setItemName(itemName);
        Order.setItemPrice(itemPrice);
        Order.setSelectedRows(selectedRows);
        Order.setOrderStatus("accept");
        if (choice != JOptionPane.CLOSED_OPTION)
        {
            if(balance.makePayment(-5)>-1)
            {
                JOptionPane.showMessageDialog(null,
                    "Payment successful", "Payment Status", JOptionPane.INFORMATION_MESSAGE);
                Order.placeOrder();
                double latestBalance=balance.makePayment(-5);
                balance.setNewBalance(latestBalance);
                balance.updateBalance();
                Ht.removeRow(Row);
                Order.removeFromFile(oId);
            }
            else
            {
                JOptionPane.showMessageDialog(null,
                    "Insufficient balance", "Payment Status", JOptionPane.ERROR_MESSAGE);  
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,
                    "Must pick a service type","Pick a type", JOptionPane.ERROR_MESSAGE);  
        }
        Order orderInstance = new Order();
        orderInstance.setuID(uID);
        List<Order> statusData2 = orderInstance.ReadOrder();
        String[] columnNames = {"Order ID", "Date", "Total", "User ID", "Service Type", "Item Name", "Order Status",
                "Vendor ID", "Delivery Status", "Item ID", "Runner ID"};
        Object[][] statusArray = new Object[statusData2.size()][];
        for (int i = 0; i < statusData2.size(); i++) {
            Order status = statusData2.get(i);
            statusArray[i] = new Object[]{
                    status.getOrderId(),
                    status.getOrderTime(),
                    status.getItemPrice(),
                    status.getuID(),
                    status.getServiceType(),
                    status.getItemName(),
                    status.getOrderStatus(),
                    status.getVendorID(),
                    status.getDeliveryS(),
                    status.getItemID(),
                    status.getRunnerID()
            };
        }
        Ht = new DefaultTableModel(statusArray, columnNames);
        statusTable.setModel(Ht);}
        else
        {
            JOptionPane.showMessageDialog(null,
                    "You can only reorder when there is no runner available","Unable to reorder", JOptionPane.ERROR_MESSAGE);  
        }}else
        {
            JOptionPane.showMessageDialog(null,
                    "Please select an order to reorder","Unable to reorder", JOptionPane.ERROR_MESSAGE);  
        }
    }//GEN-LAST:event_reorderActionPerformed

    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerOrderStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerOrderStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerOrderStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerOrderStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerOrderStatus().setVisible(true);
            }
        });
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton received;
    private javax.swing.JButton reorder;
    private javax.swing.JTable statusTable;
    // End of variables declaration//GEN-END:variables
}
